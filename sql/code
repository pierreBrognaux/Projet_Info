-- Base et s√©lection
CREATE DATABASE IF NOT EXISTS shopping_db;
USE shopping_db;

-- Suppression des anciennes tables si besoin
DROP TABLE IF EXISTS commande_article, commande, remise, article, marque, client, administrateur;

-- Table des clients
CREATE TABLE client (
    id_client INT AUTO_INCREMENT PRIMARY KEY,
    nom VARCHAR(100),
    prenom VARCHAR(100),
    email VARCHAR(150) UNIQUE NOT NULL,
    mot_de_passe VARCHAR(100) NOT NULL,
    type_client ENUM('ancien', 'nouveau') NOT NULL
);

-- Table des administrateurs
CREATE TABLE administrateur (
    id_admin INT AUTO_INCREMENT PRIMARY KEY,
    nom VARCHAR(100),
    email VARCHAR(150) UNIQUE NOT NULL,
    mot_de_passe VARCHAR(100) NOT NULL
);

-- Table des marques
CREATE TABLE marque (
    id_marque INT AUTO_INCREMENT PRIMARY KEY,
    nom_marque VARCHAR(100) UNIQUE NOT NULL
);

-- Table des articles
CREATE TABLE article (
    id_article INT AUTO_INCREMENT PRIMARY KEY,
    nom_article VARCHAR(100) NOT NULL,
    prix_unitaire DECIMAL(10, 2) NOT NULL,
    prix_gros DECIMAL(10, 2),
    quantite_gros INT,
    id_marque INT,
    FOREIGN KEY (id_marque) REFERENCES marque(id_marque)
);

-- Table des commandes
CREATE TABLE commande (
    id_commande INT AUTO_INCREMENT PRIMARY KEY,
    id_client INT,
    date_commande DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_client) REFERENCES client(id_client)
);

-- Table de jointure commande-article
CREATE TABLE commande_article (
    id_commande_article INT AUTO_INCREMENT PRIMARY KEY,
    id_commande INT,
    id_article INT,
    quantite INT NOT NULL,
    note TEXT,
    FOREIGN KEY (id_commande) REFERENCES commande(id_commande),
    FOREIGN KEY (id_article) REFERENCES article(id_article)
);

-- Table des remises (optionnelle)
CREATE TABLE remise (
    id_remise INT AUTO_INCREMENT PRIMARY KEY,
    description TEXT,
    pourcentage DECIMAL(5,2),
    id_article INT,
    FOREIGN KEY (id_article) REFERENCES article(id_article)
);

-- ----------------------
-- üì• Donn√©es de test
-- ----------------------

-- Clients
INSERT INTO client (nom, prenom, email, mot_de_passe, type_client) VALUES
('Dupont', 'Alice', 'alice@example.com', '1234', 'ancien'),
('Martin', 'Bob', 'bob@example.com', '1234', 'nouveau');

-- Administrateurs
INSERT INTO administrateur (nom, email, mot_de_passe) VALUES
('Admin1', 'admin@example.com', 'admin');

-- Marques
INSERT INTO marque (nom_marque) VALUES ('Sony'), ('Samsung'), ('Apple');

-- Articles
INSERT INTO article (nom_article, prix_unitaire, prix_gros, quantite_gros, id_marque) VALUES
('√âcouteurs', 15.00, 120.00, 10, 1),
('Chargeur', 20.00, NULL, NULL, 2),
('Clavier Bluetooth', 35.00, 300.00, 10, 3),
('Souris', 10.00, 80.00, 10, 1),
('Batterie externe', 25.00, NULL, NULL, 2);

-- Exemple de commande pass√©e (facultatif si tu veux tester DAO Commande manuellement)
INSERT INTO commande (id_client) VALUES (1);

-- Commande avec articles
INSERT INTO commande_article (id_commande, id_article, quantite, note) VALUES
(1, 1, 2, 'Fonctionne tr√®s bien.'),
(1, 4, 1, 'Livraison rapide.');

-- Remises
INSERT INTO remise (description, pourcentage, id_article) VALUES
('Promo √©t√©', 10.00, 3),
('Remise fid√©lit√©', 5.00, 1);
